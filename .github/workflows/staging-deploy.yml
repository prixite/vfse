name: deploy-to-staging
on:
  push:
    branches:
      # When someone push to `master` branch
      - master

jobs:
  pre-commit_and_test:
    uses: ./.github/workflows/ci.yml
  deploy:
    concurrency:
      group: ${{ github.ref }}
    needs: pre-commit_and_test
    name: "Deploy to staging"
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.deployTest.outputs.test }}
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}

      - name: Pull the latest code to the staging environment
        run: ssh staging 'cd vfse && git pull'

      - name: Start containers
        run: |
          ssh staging 'cd vfse && docker-compose -f docker-compose.staging.yml build'
          ssh staging 'cd vfse && docker-compose -f docker-compose.staging.yml up -d'
          ssh staging 'cd vfse && docker-compose -f docker-compose.staging.yml exec app ./manage.py migrate'
          ssh staging 'cd vfse && docker-compose -f docker-compose.staging.yml exec app npm run build'
          ssh staging 'cd vfse && docker-compose -f docker-compose.staging.yml exec app ./manage.py collectstatic --noinput'

      - name: Test the App
        run: |
          ssh staging 'if [ $( docker ps -a | grep vfse | wc -l ) -gt 0 ]; then  echo "vfse exists"; else   echo "vfse does not exist" && raise error; fi'

      - id: deployTest
        run: echo "::set-output name=test::${{ job.status }}"

  job_status_send:
      needs: deploy
      if: ${{github.event.pull_request}} && ${{ always() }}
      uses: ./.github/workflows/slack-action.yml
      with:
        slack_message: "GitHub Action Deploy result: ${{ needs.deploy.outputs.output1 }} ${{ github.event.head_commit.url }}"
      secrets:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
